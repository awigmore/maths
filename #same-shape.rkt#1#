#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 69 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 20
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 14 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 8160 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 23 29 1 #"\n"
0 0 25 3 7 #"#reader"
0 0 23 3 1 #"("
0 0 14 3 3 #"lib"
0 0 23 3 1 #" "
0 0 19 3 36 #"\"htdp-intermediate-lambda-reader.ss\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 23 3 1 #")"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 7 #"modname"
0 0 23 3 1 #" "
0 0 14 3 13 #"|#same-shape|"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"read-case-sensitive"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"teachpacks"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"htdp-settings"
0 0 23 3 1 #" "
0 0 23 3 2 #"#("
0 0 20 3 2 #"#t"
0 0 23 3 1 #" "
0 0 14 3 10 #"quasiquote"
0 0 23 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 1 #" "
0 0 14 3 4 #"none"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";; Data definition for a graph, G1, and some same-graph? tests:"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";; http://www.ccs.neu.edu/course/csu211/Assignments/10h.html"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #";; ascii art: http://patorjk.com/software/taag/#p=display&f=Bell&t=a"
 #"scii"
) 0 0 23 29 1 #"\n"
0 0 17 3 46 #";; Written in Intermediate Student with lambda"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; By Matthew Singer"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";; Problem: Given two graphs, determine if they have the same shape."
0 0 23 29 1 #"\n"
0 0 17 3 68
#";; Two graphs have the same shape if, after removing all node names,"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; one can rearrange the nodes (without altering which edges connect"
 #" "
) 0 0 23 29 1 #"\n"
0 0 17 3 48 #";; to which node) and get back the same picture."
0 0 23 29 1 #"\n"
0 0 17 3 73
(
 #";; One could try every permutation swapping the node names from the "
 #"first"
) 0 0 23 29 1 #"\n"
0 0 17 3 57 #";; with the second, but that's guaranteed factorial time."
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #";; The algorithm used here only alters corresponding nodes with the "
 #"same"
) 0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; amount of vertices, which, in worst case, is factorial (two graph"
 #"s"
) 0 0 23 29 1 #"\n"
0 0 17 3 63
#";; with 20 nodes that each connection to 7 nodes, for example),"
0 0 23 29 1 #"\n"
0 0 17 3 73
(
 #";; but a graph with 20 nodes, 18 of which connect to 0, 1, 2... 17 n"
 #"odes,"
) 0 0 23 29 1 #"\n"
0 0 17 3 61
#";; and two of which connect to 20, will execute very quickly."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; Document structure:"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; Data Definitions"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; List Functions (helpers)"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";; Bin and Choice (helpers - explained in data definitions)"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; Examples (of graphs-related data definitions)"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; Graph Functions (helpers)"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; same-shape? (the final result and many tests)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 81
(
 #";; To easily find one section, View -> Show Program Contour (or comm"
 #"and+u/ctrl+u)"
) 0 0 23 29 1 #"\n"
0 0 17 3 22 #";; or command+f/ctrl+f"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; .___           .             .                          "
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; /   `    ___  _/_     ___ "
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; |    |  /   `  |     /   `"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; |    | |    |  |    |    |"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; /---/  `.__/|  \\__/ `.__/|"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; .___          ,__              .                          "
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; /   `    ___  /  ` ` , __   ` _/_   `   __.  , __     ____"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; |    | .'   ` |__  | |'  `. |  |    | .'   \\ |'  `.  (    "
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; |    | |----' |    | |    | |  |    | |    | |    |  `--. "
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; /---/  `.___, |    / /    | /  \\__/ /  `._.' /    | \\___.'"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; Data Definitions "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; An [Equality X] is a [X X -> Boolean]"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; and is an equivalence relation"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"graph"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"nodes"
0 0 23 3 1 #" "
0 0 14 3 9 #"neighbors"
0 0 23 3 1 #" "
0 0 14 3 6 #"node=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";; A [Graph X] is a (make-graph [List X] [X -> [List X]] [Equality X"
 #"])"
) 0 0 23 29 1 #"\n"
0 0 17 3 40 #";; Invariant: For all nodes n a graph g,"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; (member n (remove n (graph-nodes g))) = false"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; (i.e. all node names are distinct)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; A [Size-Graph X] is a [Graph (list X Natural)]"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; Where the number in the pair of the node is"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; how many neighbors the node has"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; A [Sorted-Size-Graph X] is a [Size-Graph x]"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; where the list of nodes is sorted in descending"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; order based on how many neighbors it has"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; Note: A sorted size graph represents the same"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; graph as its unsorted version, but the sorting"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; of nodes can be (and is) used for computation"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; A Bin is a [List Positive]"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; A bin represents how many elements in a list"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; belong to a certain \"bin\""
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; For example, the list '(a a a b d e e)"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; lends itself to the Bin '(3 1 1 2)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; A Choice is a [List Natural]"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; A choice represents indices of a nested for loop"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Using java syntax:"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; for (int i = 0; i < 2; i++) "
0 0 23 29 1 #"\n"
0 0 17 3 32 #";;   for (int j = 0; j < 3; j++)"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";;     for (int k = 0; k < 2; k++)"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; '(1 2 0) would represent the moment in the for loop"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; where i = 1, j = 2, and k = 0"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; A [Pair X Y] is a (list X Y)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; A [Maybe X] is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";; - X"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";; - false"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; .               .                      "
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; /     `   ____ _/_       "
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; |     |  (      |         "
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; |     |  `--.   |       "
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; /---/ / \\___.'  \\__/     "
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; .____                      .                          "
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; /     ,   . , __     ___  _/_   `   __.  , __     ____"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; |__.  |   | |'  `. .'   `  |    | .'   \\ |'  `.  (    "
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; |     |   | |    | |       |    | |    | |    |  `--. "
0 0 23 29 1 #"\n"
0 0 17 3 56
#"; /     `._/| /    |  `._.'  \\__/ /  `._.' /    | \\___.'"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; List Functions"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 57 #";; list=? : [List X] x [List X] x [Equality X] -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; Are the two lists the same? (order does not matter)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #" "
0 0 14 3 2 #"l2"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"l2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 2 #"l2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"rem"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 2 #"l2"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"false?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"l1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";; rem : X x [List X] x [Equality X] -> [Maybe [List X]]"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; Removes an element from the list, or returns false"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; if it isn't there"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; Written to increase speed of list=?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"rem"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"rem"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"false?"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"rem"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"rem"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"rem"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"rem"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; inverse-ref : [List X] x X x [Equality X] -> Natural"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; The location of the element in the list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"inverse-ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"not here\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"inverse-ref"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"inverse-ref"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"inverse-ref"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"not here\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; pair=? : [Equality X] x [Equality Y] -> [Equality [Pair X Y]]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 9 #"x-equals?"
0 0 23 3 1 #" "
0 0 14 3 9 #"y-equals?"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"x-equals?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 9 #"y-equals?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; simple-map : [List X] x [List X] x [Equality X] -> [X -> X]"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; A simple map from corresponding elements in x1 to x2"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; (length x1) = (length x2)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"simple-map"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"dumb-map"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"not here\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"dumb-map"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 8 #"dumb-map"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 10 #"simple-map"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 10 #"simple-map"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"not here\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #"; ____                                    _        ___  _           "
 #"                 "
) 0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #"; /   \\  ` , __          ___  , __     ___/      .'   \\ /        _"
 #"_.  `   ___    ___ "
) 0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #"; |,_-<  | |'  `.       /   ` |'  `.  /   |      |      |,---. .'   "
 #"\\ | .'   ` .'   `"
) 0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #"; |    ` | |    |      |    | |    | ,'   |      |      |'   ` |    "
 #"| | |      |----'"
) 0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #"; `----' / /    |      `.__/| /    | `___,'       `.__, /    |  `._."
 #"' /  `._.' `.___,"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; Bin and Choice"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; ! : Natural -> Positive"
0 0 23 29 1 #"\n"
0 0 17 3 5 #";; x!"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 3 #"acc"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 3 #"120"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; kth-perm : Nat x [List X] -> [List X]"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; Create the kth permutation of x"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Assumes no repeats"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; k < (length x)!"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"x-1!"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"element"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"quotient"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 4 #"x-1!"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 7 #"element"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"remove"
0 0 23 3 1 #" "
0 0 14 3 7 #"element"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"modulo"
0 0 23 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #" "
0 0 14 3 4 #"x-1!"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; choice-maker : Nat x [List Positive] -> Choice"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; x is a list of numbers representing how many"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; options can be chosen for each choice"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; n is which number choice you wish to make"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; n is in the range [0, (apply * x))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"choice-maker"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 4 #"prod"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"newprod"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 4 #"prod"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"quotient"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 7 #"newprod"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"modulo"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 7 #"newprod"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 7 #"newprod"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"apply"
0 0 23 3 1 #" "
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"choice-maker"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"choice-maker"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"choice-maker"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"choice-maker"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"apply"
0 0 23 3 1 #" "
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"choice-maker"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; first-n : [List X] x Nat -> [List X]"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; first-n elements of a list"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; n <= (length lox)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"first-n"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 20 #"\"asked for too much\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"first-n"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"first-n"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 19 3 20 #"\"asked for too much\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"first-n"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"first-n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; rest-n : [List X] x Nat -> [List X]"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; take the rest n many times"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; n <= (length lox)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"rest-n"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 20 #"\"asked for too much\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"rest-n"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"rest-n"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 19 3 20 #"\"asked for too much\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"rest-n"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"rest-n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"first-n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"rest-n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; bin-swap : [List X] x Bin x Natural -> [List X]"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; The nth rearrangement of lox, based on the bin"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; n < (apply * (map ! bin))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"bin-swap"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #" "
0 0 14 3 3 #"bin"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"choice"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"choice-maker"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 14 3 3 #"bin"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 6 #"choice"
0 0 23 3 1 #" "
0 0 14 3 3 #"bin"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 6 #"choice"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"perm"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"first-n"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"bin"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 6 #"choice"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 14 3 4 #"perm"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 6 #"choice"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"bin"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"rest-n"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"bin"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 6 #"choice"
0 0 23 3 1 #" "
0 0 14 3 3 #"bin"
0 0 23 3 1 #" "
0 0 14 3 3 #"lox"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"BIN-SWAP-TEST"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 6 #"batman"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 5 #"flash"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 5 #"flash"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 14 3 11 #"wonderwoman"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; The bin sizes are 1, 2, 3, 1"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"choice-maker"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; The 0th, 1st, 4th, and 0th permutations of the bins will be used"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 6 #"batman"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 6 #"batman"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 5 #"flash"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 5 #"flash"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 5 #"flash"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 5 #"flash"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 14 3 11 #"wonderwoman"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 14 3 11 #"wonderwoman"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";; The actual bin-swap"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"bin-swap"
0 0 23 3 1 #" "
0 0 14 3 13 #"BIN-SWAP-TEST"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 6 #"batman"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 5 #"flash"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 5 #"flash"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 5 #"supes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 14 3 11 #"wonderwoman"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; .____                                 .                "
0 0 23 29 1 #"\n"
0 0 17 3 57
#"; /      _  .-   ___  , _ , _   \\,___,  |     ___    ____"
0 0 23 29 1 #"\n"
0 0 17 3 57
#"; |__.    \\,'   /   ` |' `|' `. |    \\  |   .'   `  (    "
0 0 23 29 1 #"\n"
0 0 17 3 57
#"; |       /\\   |    | |   |   | |    |  |   |----'  `--. "
0 0 23 29 1 #"\n"
0 0 17 3 57
#"; /----/ /  \\  `.__/| /   '   / |`---' /\\__ `.___, \\___.'"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; Examples"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; G1 is a [Graph Symbol]"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 14 3 1 #"G"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"B"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"F"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"C"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"D"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"E"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 14 3 1 #"A"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"F"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 14 3 1 #"G"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"G"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"G"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; SG1 is a [Size-Graph Symbol] and represents"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; the size-graph version of G1"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 14 3 1 #"G"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"G"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"G"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"G"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; SSG1 is a [Sorted-Size-Graph Symbol] and is"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; the sorted-size-graph version of SG1"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"G"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"C"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"F"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"D"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"G"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"G"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"G"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";   ___                       _       "
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; .'   \\  .___    ___  \\,___, /       "
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; |       /   \\  /   ` |    \\ |,---. "
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; |    _  |   ' |    | |    | |'   `  "
0 0 23 29 1 #"\n"
0 0 17 3 38 #";  `.___| /     `.__/| |`---' /    |  "
0 0 23 29 1 #"\n"
0 0 17 3 96
(
 #";                      \\                                           "
 #"                             "
) 0 0 23 29 1 #"\n"
0 0 17 3 30 #"; .____                      ."
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; /     ,   . , __     ___  _/_   `   __.  , __     ____"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; |__.  |   | |'  `. .'   `  |    | .'   \\ |'  `.  (    "
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; |     |   | |    | |       |    | |    | |    |  `--. "
0 0 23 29 1 #"\n"
0 0 17 3 56
#"; /     `._/| /    |  `._.'  \\__/ /  `._.' /    | \\___.'"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; Graph Functions"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; same-graph? : [Equality [Graph X]]"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; Are the two graphs the same?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"listx=?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"graph-node=?"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"nodes1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"listx=?"
0 0 23 3 1 #" "
0 0 14 3 6 #"nodes1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 6 #"andmap"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"listx=?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                    "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 14 3 6 #"nodes1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; neighbor-size : [Graph X] x X -> Natural"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; How many neighbors a single node has"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"neighbor-size"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"neighbor-size"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"A"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; neighbor-size-list : [Graph X] -> [List Natural]"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; A list of how many neighbors each node has"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"neighbor-size-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"neighbor-size"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"neighbor-size-list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"neighbor-size-list"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 43 #";; size-graph : [Graph X] -> [Size-Graph X]"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";; Every node becomes its named paired with its neighbor size"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"size-graph"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"newnodes"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"neighbor-size-list"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 7 #"oldnode"
0 0 23 3 1 #" "
0 0 14 3 8 #"newnodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 8 #"newnodes"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 31 #"\"oldnode not found in newnodes\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 12 #"graph-node=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 7 #"oldnode"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 8 #"newnodes"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 8 #"newnodes"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 23 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 7 #"oldnode"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 8 #"newnodes"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 14 3 8 #"newnodes"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"newnode"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"oldnode"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 7 #"oldnode"
0 0 23 3 1 #" "
0 0 14 3 8 #"newnodes"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 7 #"newnode"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"graph-node=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"size-graph"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";; sort-size-graph : [Size-Graph X] -> [Sorted-Size-Graph X]"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";; Sorts a size graph in descending order by size of nodes"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"sort-size-graph"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sort"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"p1"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 2 #"p1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"graph-node=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"sort-size-graph"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"apply"
0 0 23 3 1 #" "
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"sort-size-graph"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"sort-size-graph"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; change-names : [Graph X] [List X] -> [Graph X]"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; Change the names of vertices within a graph"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; (length (graph-nodes g)) = (length x)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"change-names"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"s-map"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"simple-map"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"graph-node=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 5 #"s-map"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 42 #"                                          "
0 0 23 3 1 #"("
0 0 14 3 11 #"inverse-ref"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"graph-node=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 12 #"graph-node=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"change-names"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; swap-names : [Graph X] x [Graph X] -> [Graph X]"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; Swap all names in the second graph with the names in the first gr"
 #"aph"
) 0 0 23 29 1 #"\n"
0 0 17 3 51 #";; in order (note: graphs must be of the same size)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"swap-names"
0 0 23 3 1 #" "
0 0 14 3 4 #"ssg1"
0 0 23 3 1 #" "
0 0 14 3 4 #"ssg2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 12 #"change-names"
0 0 23 3 1 #" "
0 0 14 3 4 #"ssg2"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 4 #"ssg1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG3"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"swap-names"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 10 #"swap-names"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; bin-pair : [List (list X Natural)] -> Bin"
0 0 23 29 1 #"\n"
0 0 17 3 75
(
 #";; Output how many times the second number occurs in a sorted list o"
 #"f pairs"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"bin-pair"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"bin-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"bin-helper"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                  "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"bin-helper"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; 2 appears 4 times, 0 appears once"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"bin-pair"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; bin-ssg : [Sorted-Size-Graph X] -> Bin"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; bins an ssg"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"bin-ssg"
0 0 23 3 1 #" "
0 0 14 3 3 #"ssg"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 8 #"bin-pair"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 3 #"ssg"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"bin-ssg"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"bin-ssg"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"bin-ssg"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"bin-ssg"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #";; change-ssg : [Sorted-Size-Graph X] x Natural -> [Sorted-Size-Grap"
 #"h X]"
) 0 0 23 29 1 #"\n"
0 0 17 3 33 #";; The nth refactoring of the ssg"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"change-ssg"
0 0 23 3 1 #" "
0 0 14 3 3 #"ssg"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 12 #"change-names"
0 0 23 3 1 #" "
0 0 14 3 3 #"ssg"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"bin-swap"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 3 #"ssg"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"bin-ssg"
0 0 23 3 1 #" "
0 0 14 3 3 #"ssg"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"change-ssg"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #";; perm-count : [Sorted-Size-Graph X] -> Natural"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; How many permutations will need to be made?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"perm-count"
0 0 23 3 1 #" "
0 0 14 3 3 #"ssg"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"bin-num"
0 0 23 3 1 #" "
0 0 14 3 7 #"product"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 14 3 7 #"bin-num"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 7 #"product"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"bin-ssg"
0 0 23 3 1 #" "
0 0 14 3 3 #"ssg"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"perm-count"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"perm-count"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";; natural-graph : [Graph X] -> [Graph Natural]"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; Convert the graph to a natural graph"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; where every node is now named by its place"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; in the original graph's list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"natural-graph"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"x->nat"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"inverse-ref"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"graph-node=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"identity"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 6 #"x->nat"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 15 #"graph-neighbors"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"natural-graph"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";; nat-size-graph : [Graph X] ->  [Sorted-Size-Graph Natural]"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; Converts a graph into a sorted natural size graph"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"nat-size-graph"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 15 #"sort-size-graph"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"size-graph"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"natural-graph"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"nat-size-graph"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"pair=?"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 23 3 1 #"("
0 0 14 3 15 #"sort-size-graph"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 55 #"                                                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 55 #"                                                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 55 #"                                                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 55 #"                                                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 55 #"                                                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 55 #"                                                       "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 7 #"equals?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 14 3 7 #"equals?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";                                             _                     "
 #"       __  "
) 0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";   ____   ___  , _ , _     ___          ____ /        ___  \\,___, "
 #"  ___  /  `."
) 0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";  (      /   ` |' `|' `. .'   ` .---'  (     |,---.  /   ` |    \\ "
 #".'   ` `   '"
) 0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #";  `--.  |    | |   |   | |----'        `--.  |'   ` |    | |    | |"
 #"----'    / "
) 0 0 23 29 1 #"\n"
0 0 17 3 79
(
 #"; \\___.' `.__/| /   '   / `.___,       \\___.' /    | `.__/| |`---'"
 #" `.___,   ,  "
) 0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #";                                                           \\      "
 #"         ' "
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; same-shape?"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; same-shape-helper? : [Equality [Sorted-Size-Graph Natural]]"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; Are the graphs of the same shape"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 17 #"same-shape-helper"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                 "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-graph?"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"change-ssg"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"perm-count"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; same-shape? : [Equality Graph]"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; Do two graphs have the same shape?"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"graph-nodes"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 6 #"list=?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"neighbor-size-list"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"neighbor-size-list"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 17 #"same-shape-helper"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"nat-size-graph"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                          "
0 0 23 3 1 #"("
0 0 14 3 10 #"swap-names"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"nat-size-graph"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"nat-size-graph"
0 0 23 3 1 #" "
0 0 14 3 2 #"g2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                               "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 51 #"                                                   "
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"d"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"e"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"e"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"g\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"random"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 23 3 1 #"("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"g\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"c\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"string=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                       "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 51 #"                                                   "
0 0 23 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"d"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"e"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"e"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                 "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"symbol=?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 23 3 1 #"("
0 0 14 3 10 #"make-graph"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 23 3 1 #"("
0 0 14 3 8 #"kth-perm"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"g\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"random"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"!"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 23 3 1 #"("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 14 3 4 #"node"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                                "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 3 1 #" "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                      "
0 0 23 3 1 #"["
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"g\""
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 1 #")"
0 0 23 3 1 #"]"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 8 #"string=?"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; Checks for equivalence relation"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";; equivalence-check : [Equality X] -> [[List X] -> Boolean]"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; Generates a check for an equivalence "
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; (list of elements given to generated function must be equal"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; under eq)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 17 #"equivalence-check"
0 0 23 3 1 #" "
0 0 14 3 2 #"eq"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 5 #"local"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"eq"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"("
0 0 14 3 6 #"andmap"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"eq"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 43 #"                                           "
0 0 23 3 1 #"("
0 0 14 3 2 #"eq"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 5 #"listx"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 17 #"equivalence-check"
0 0 23 3 1 #" "
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 17 #"equivalence-check"
0 0 23 3 1 #" "
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG2"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 17 #"equivalence-check"
0 0 23 3 1 #" "
0 0 14 3 11 #"same-shape?"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"g1"
0 0 23 3 1 #" "
0 0 14 3 2 #"G1"
0 0 23 3 1 #" "
0 0 14 3 3 #"SG1"
0 0 23 3 1 #" "
0 0 14 3 4 #"SSG1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0           0
